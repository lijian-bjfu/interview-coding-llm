---
description: 数据的管理流程与操作规范
globs: 
alwaysApply: false
---
# 数据管理规范

本规范定义了项目中数据的管理流程、操作规范和最佳实践。

### 1.1 基本原则

1. **数据完整性**
   - 保持原始数据的完整性，不直接修改原始数据
   - 所有数据处理操作必须可追溯和可重现
   - 定期验证数据的完整性和一致性
   - 确保关键索引列（如"序号"列）的完整性，这对于数据追踪和验证至关重要
   - 在数据转换过程中必须保持原始数据的索引列

2. **数据安全性**
   - 遵循最小权限原则访问数据
   - 敏感数据必须进行适当的加密和保护
   - 定期备份重要数据

3. **数据一致性**
   - 保持数据格式的统一性
   - 确保数据处理流程的一致性
   - 维护数据版本的同步性
   - 在数据处理过程中验证索引列与原始数据的对应关系
   - 定期进行数据完整性校验，确保没有数据丢失

### 1.2 访问控制

1. **路径访问**
   - 使用 parameters.py 提供的接口访问数据
   - 避免硬编码文件路径
   - 验证文件路径的有效性

2. **权限管理**
   - 遵循项目的权限设置
   - 记录数据访问日志
   - 定期审查访问权限

## 2. 数据处理流程

### 2.1 数据导入

1. **原始数据验证**
   - 检查文件格式是否符合要求
   - 验证数据的完整性和有效性
   - 记录数据来源和版本信息
   - 确保保留原始数据的所有列（如"序号"、“id”列），这对于后续数据追踪和验证至关重要

2. **数据预处理**
   - 统一数据格式
   - 清理无效或重复数据
   - 生成处理日志
   - 在数据转换时保持索引列的完整性
   - 记录列映射关系，特别是关键列的映射

3. **多行文字处理规则**
当CSV文件包含多行文本字段时，需要特别注意以下问题和解决方案：

- 问题表征：
   - pandas读取时将单个记录错误拆分为多行
   - 字段内换行符导致数据解析错误

- 原理分析：
   - CSV规范中，字段内换行需要用引号包裹
   - pandas默认配置可能无法正确处理复杂的引号嵌套

- 解决方案：
   a. 预处理方法：
      - 使用引号计数识别完整数据行
      - 智能处理字段分割，保护引号内的逗号
      - 清理不必要的换行符和空白字符
      - 保持必要的引号结构

   b. 处理步骤：
      - 分离标题行和数据内容
      - 基于引号配对合并分散的数据行
      - 规范化字段引号和分隔符

- 验证标准：
   - 数据行数应与实际记录数一致
   - 字段内容完整，无不当换行
   - pandas可正确读取处理后的文件

### 2.2 数据转换

1. **横向数据处理**
   - 按问题组织数据
   - 保持数据的关联性
   - 验证转换结果
   - 确保索引列的正确映射和保留

2. **纵向数据处理**
   - 按被访者组织数据
   - 维护问题顺序
   - 确保数据完整性
   - 保持索引列与原始数据的对应关系

### 2.3 编码处理

1. **归纳编码**
   - 生成问题编码
   - 合并编码结果
   - 验证编码质量
   - 记录编码与原始数据的对应关系

2. **演绎编码**
   - 基于归纳编码生成编码本
   - 按照大纲category拆分横向数据
   - 对于每个category问题数据使用编码本进行归纳编码
   - 保持与原始数据的追溯性

## 3. 数据质量管理

### 3.1 质量检查

1. **数据验证**
   - 检查数据格式
   - 验证数据完整性
   - 识别异常数据
   - 确保关键索引列（如"序号"列）的完整性和正确性
   - 在数据转换过程中保持原始数据的索引列，以确保数据可追溯性

2. **一致性检查**
   - 验证数据关联
   - 检查数据同步
   - 确保版本一致
   - 在数据处理过程中验证索引列与原始数据的对应关系
   - 定期进行数据完整性校验，确保没有数据丢失

3. **列映射验证**
   - 在进行DataFrame转换时，明确记录列映射关系
   - 对关键列（如"序号"列）进行特殊标记和处理
   - 在数据转换前后进行列数量和内容的一致性检查
   - 保留原始列名到新列名的映射记录

### 3.2 错误处理

1. **错误预防**
   - 实施数据验证
   - 使用类型检查
   - 添加异常处理
   - 对关键列进行特殊保护

2. **错误修复**
   - 记录错误信息
   - 实施修复措施
   - 验证修复结果
   - 确保修复过程不影响数据完整性

## 4. 数据维护流程

### 4.1 日常维护

1. **定期检查**
   - 验证数据完整性
   - 检查文件权限
   - 更新访问日志

2. **数据备份**
   - 执行定期备份
   - 验证备份有效性
   - 维护备份记录

### 4.2 问题处理

1. **问题识别**
   - 监控数据状态
   - 记录异常情况
   - 评估影响范围

2. **解决方案**
   - 制定修复计划
   - 实施解决方案
   - 验证处理结果

## 5. 最佳实践

### 5.1 数据操作

1. **文件操作**
   ```python
   # 使用上下文管理器处理文件
   with open(file_path, 'r', encoding='utf-8') as f:
       data = f.read()
   
   # 使用安全的文件写入方式
   import json
   with open(output_path, 'w', encoding='utf-8') as f:
       json.dump(data, f, ensure_ascii=False, indent=2)
   ```

2. **错误处理**
   ```python
   try:
       # 数据处理操作
       process_data(data)
   except FileNotFoundError:
       logger.error("数据文件不存在")
       raise
   except json.JSONDecodeError:
       logger.error("JSON格式错误")
       raise
   finally:
       # 清理操作
       cleanup_resources()
   ```

### 5.2 数据验证

1. **输入验证**
   ```python
   def validate_data(data):
       """验证数据的有效性"""
       if not isinstance(data, dict):
           raise TypeError("数据必须是字典类型")
       
       required_fields = ['question_text', 'codes_and_quotes']
       for field in required_fields:
           if field not in data:
               raise ValueError(f"缺少必需字段: {field}")
   ```

2. **输出验证**
   ```python
   def verify_output(result):
       """验证输出结果"""
       if not result:
           logger.warning("生成了空结果")
           return False
       
       try:
           validate_data(result)
           return True
       except (TypeError, ValueError) as e:
           logger.error(f"输出验证失败: {e}")
           return False
   ```

3. **DataFrame处理验证**
   ```python
   def process_dataframe(df):
       """处理DataFrame时保持索引列的完整性"""
       # 保存原始的序号列
       if '序号' in df.columns:
           index_column = df['序号'].copy()
       else:
           logger.warning("未找到序号列，将使用DataFrame的索引")
           index_column = df.index
           
       # 进行数据处理
       processed_df = transform_data(df)
       
       # 确保处理后的DataFrame包含序号列
       if '序号' not in processed_df.columns:
           processed_df['序号'] = index_column
           
       # 验证序号列的完整性
       if not processed_df['序号'].equals(index_column):
           logger.error("数据处理导致序号列发生变化")
           raise ValueError("数据完整性检查失败：序号列不匹配")
           
       return processed_df
   ```

### 5.3 日志记录

1. **操作日志**
   ```python
   import logging

   logger = logging.getLogger(__name__)
   
   def process_data(data):
       logger.info("开始处理数据")
       try:
           result = transform_data(data)
           logger.info("数据处理完成")
           return result
       except Exception as e:
           logger.error(f"数据处理失败: {e}")
           raise
   ```

2. **审计日志**
   ```python
   def audit_log(operation, status, details=None):
       """记录审计日志"""
       log_entry = {
           'timestamp': datetime.now().isoformat(),
           'operation': operation,
           'status': status,
           'details': details
       }
       logger.info(f"审计日志: {log_entry}")
   ``` 