# 数据管理系统

本项目使用 parameters.py 作为中央配置枢纽，统一管理所有数据文件的路径和访问方式。

## 1. 数据目录结构

### 1.1 基本目录结构

```
📁 data_dir/                              # 预设根目录
└── 📁 {APP_NAME}_dir/                    # 以用户输入的调研产品名称命名
    ├── 📁 00_rawdata_dir/                # 原始数据
    ├── 📁 01_preprocessed_for_llm_dir/   # 预处理数据
    ├── 📁 02_interview_outline_dir/      # 访谈大纲数据
    ├── 📁 03_inductive_coding_dir/       # 归纳编码数据
    └── 📁 04_deductive_coding_dir/       # 演绎编码数据
```

### 1.2 Category 目录结构

每个 Category（分类）在 `02_interview_outline_dir` 下都有独立的目录结构：

```
📁 02_interview_outline_dir/
├── 📁 用户特征/                          # Category 示例
│   ├── 📁 question_data_dir/            # 问题数据
│   ├── 📁 codebook_data_dir/            # 编码本数据
│   └── 📁 meta_data_dir/                # 元数据
└── 📁 [其他 Category]/                   # 相同结构
```

## 2. Category 系统

### 2.1 Category 定义

Category（分类）是访谈大纲的顶层组织单位，代表访谈内容的主要主题或方面。每个Category包含一组相关的访谈问题。例如：
- 用户特征：基本人口统计学信息（年龄、职业等）
- 用户体验：产品使用体验和感受
- 产品特征：对产品功能和特性的评价
- 创造性体验：使用产品时的创造性活动
- 游戏体验：游戏相关的体验和行为

### 2.2 Category 数据存储

Category信息存储在项目根目录的 `{APP_NAME}-outline.csv` 文件中，该文件的结构如下：

```csv
问题编号,分类名称,问题内容
1,用户特征,您的年龄是？
2,用户特征,您的职业是？
6,用户体验,您最常使用产品的哪些功能？
7,用户体验,使用过程中遇到过什么问题？
```

### 2.3 访问 Category 数据

parameters.py 提供了多种方式访问Category相关数据：

1. **获取Category列表**：
```python
from parameters import UNIQUE_CATEGORIES

# UNIQUE_CATEGORIES 包含所有分类名称
for category in UNIQUE_CATEGORIES:
    print(f"处理分类: {category}")
```

2. **获取Category-问题映射**：
```python
from parameters import OUTLINE

# OUTLINE 是一个字典，键为分类名称，值为该分类下的问题编号列表
for category, question_numbers in OUTLINE.items():
    print(f"分类 {category} 包含问题: {question_numbers}")
```

3. **访问Category特定目录**：
```python
from parameters import (
    get_category_specific_path,
    SDIR_GROUP_QDATA,
)

# 获取特定分类的问题数据目录
category_path = get_category_specific_path("用户体验", SDIR_GROUP_QDATA)
```

## 3. 数据接口

### 3.1 基本导入

```python
# 导入路径获取接口
from parameters import (
    get_path,                    # 获取单个文件或目录路径
    get_path_list,              # 获取分组路径列表
    get_category_specific_path,  # 获取特定分类的路径
)

# 导入目录类型常量
from parameters import (
    SDIR_GROUP_QDATA,   # 问题数据目录
    SDIR_GROUP_CBOOK,   # 编码本目录
    SDIR_GROUP_META,    # 元数据目录
)

# 导入目录创建工具
from parameters import ensure_dir_exists

# 导入日志工具（可选）
from parameters import logger
```

### 3.2 按功能导入

根据脚本的不同功能需求，可以选择性导入：

```python
# 处理原始数据的脚本
from parameters import (
    get_path,
    APP_NAME,
    PROJECT_ROOT,
    SDIR_00_RAW,
)

# 处理归纳编码的脚本
from parameters import (
    get_path,
    get_path_list,
    get_category_specific_path,
    SDIR_GROUP_QDATA,
    SDIR_GROUP_CBOOK,
)

# 处理演绎编码的脚本
from parameters import (
    get_path,
    get_category_specific_path,
    SDIR_GROUP_META,
)
```

### 3.3 可用路径键值

#### 单个路径键值 (get_path)

| 键名 | 说明 | 示例路径 |
|------|------|----------|
| 'APP_PATH' | 应用根目录 | `.../data_dir/myworld_dir/` |
| 'UI' | 原始数据文件 | `.../00_rawdata_dir/myworld.csv` |
| 'UI_ol' | 原始大纲文件 | `.../00_rawdata_dir/myworld-outline.csv` |
| 'UI_path' | 原始数据目录 | `.../00_rawdata_dir/` |
| 'UI_utxt' | 预处理后的用户文本 | `.../01_preprocessed_for_llm_dir/myworld_user.txt` |
| 'UI_qtxt' | 预处理后的问题文本 | `.../01_preprocessed_for_llm_dir/myworld_question.txt` |
| 'UI_utxt_path' | 预处理数据目录 | `.../01_preprocessed_for_llm_dir/` |
| 'inductive_global_dir' | 归纳编码全局目录 | `.../03_inductive_coding_dir/` |
| 'inductive_merged_json' | 归纳编码合并结果 | `.../03_inductive_coding_dir/myworld_inductive_codes.json` |
| 'inductive_maxqda_opencode' | MAXQDA开放编码 | `.../03_inductive_coding_dir/myworld_inductive_maxqda_opencode.txt` |
| 'inductive_maxqda_themecode' | MAXQDA主题编码 | `.../03_inductive_coding_dir/myworld_inductive_maxqda_themecode.txt` |
| 'inductive_global_metadata' | 归纳编码元数据 | `.../03_inductive_coding_dir/myworld_inductive_metadata.json` |
| 'deductive_global_dir' | 演绎编码全局目录 | `.../04_deductive_coding_dir/` |
| 'deductive_llm_raw_output' | LLM原始输出 | `.../04_deductive_coding_dir/myworld_deductive_llm_output.json` |
| 'deductive_maxqda_text' | MAXQDA演绎编码 | `.../04_deductive_coding_dir/myworld_deductive_maxqda.txt` |
| 'deductive_global_metadata' | 演绎编码元数据 | `.../04_deductive_coding_dir/myworld_deductive_metadata.json` |

#### 路径列表键值 (get_path_list)

| 键名 | 说明 | 返回类型 |
|------|------|----------|
| 'grouped_qdata_category_dirs' | 所有分类的问题数据目录 | List[str] |
| 'grouped_user_g_txts' | 所有分类的用户回答文本 | List[str] |
| 'grouped_inductive_q_jsons' | 归纳编码问题JSON文件 | List[List[str]] |
| 'grouped_deductive_llm_jsons_in_group' | 演绎编码LLM输出 | List[str] |
| 'grouped_inductive_q_cbook_jsons' | 归纳编码本JSON文件 | List[List[str]] |
| 'grouped_raw_codebook_txts' | 原始编码本文本文件 | List[str] |
| 'grouped_final_codebooks_txts' | 最终编码本文本文件 | List[str] |
| 'grouped_meta_data_files' | 分类元数据文件 | List[str] |

#### 文件名模式

| 键名 | 说明 | 模式 |
|------|------|------|
| 'pattern_inductive_q_json' | 归纳编码问题JSON | `'inductive_question[0-9]*.json'` |
| 'pattern_inductive_q_cbook_json' | 归纳编码本JSON | `'inductive_question[0-9]*_codebook.json'` |
| 'pattern_deductive_llm_in_group' | 演绎编码LLM输出 | `'deductive_code_by_LLM.json'` |

## 4. 最佳实践

### 4.1 路径访问规则
- 总是使用接口提供的路径，不要自行拼接或修改
- 使用前检查路径是否存在
- 对于新文件，确保父目录存在

### 4.2 Category 操作规则
- 使用 UNIQUE_CATEGORIES 验证 Category 名称
- 保持 Category 目录结构一致性
- 使用 get_category_specific_path 访问 Category 数据

### 4.3 错误处理
- 捕获并妥善处理文件操作异常
- 使用 parameters.py 提供的 ensure_dir_exists 函数创建目录
- 记录关键操作的日志

### 4.4 编码处理
- 始终使用 UTF-8 编码读写文件
- JSON 文件使用 ensure_ascii=False 保存中文
- 使用上下文管理器处理文件操作

## 5. 注意事项

- 不要直接修改 parameters.py 中的路径配置
- 遵循项目的目录结构和命名约定
- 在处理大量文件时，考虑使用上下文管理器
- 保持良好的错误处理和日志记录习惯 